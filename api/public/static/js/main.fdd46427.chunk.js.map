{"version":3,"sources":["Signin.js","serviceWorker.js","index.js"],"names":["SignIn","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","redirect","email","password","clientID","redirectURI","stateString","login","e","preventDefault","console","log","_this$state","axios","post","then","res","status","setState","alert","data","token","accessToken","values","queryString","parse","window","location","search","client_id","redirect_uri","_this2","classes","_this$state2","url","concat","react_default","a","createElement","className","main","CssBaseline_default","Paper_default","paper","Avatar_default","avatar","LockOutlined_default","Typography_default","component","variant","form","onSubmit","FormControl_default","margin","required","fullWidth","InputLabel_default","htmlFor","Input_default","onChange","event","target","value","id","name","autoComplete","autoFocus","type","Button_default","color","submit","Component","withStyles","theme","defineProperty","width","display","marginLeft","spacing","unit","marginRight","breakpoints","up","marginTop","flexDirection","alignItems","padding","backgroundColor","palette","secondary","Boolean","hostname","match","ReactDOM","render","Signin","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.fdd46427.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport Avatar from '@material-ui/core/Avatar';\nimport Button from '@material-ui/core/Button';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport FormControl from '@material-ui/core/FormControl';\nimport Input from '@material-ui/core/Input';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\nimport Paper from '@material-ui/core/Paper';\nimport Typography from '@material-ui/core/Typography';\nimport withStyles from '@material-ui/core/styles/withStyles';\nimport queryString from 'query-string';\nimport axios from 'axios';\n\nconst styles = theme => ({\n    main: {\n        width: 'auto',\n        display: 'block', // Fix IE 11 issue.\n        marginLeft: theme.spacing.unit * 3,\n        marginRight: theme.spacing.unit * 3,\n        [theme.breakpoints.up(400 + theme.spacing.unit * 3 * 2)]: {\n            width: 400,\n            marginLeft: 'auto',\n            marginRight: 'auto',\n        },\n    },\n    paper: {\n        marginTop: theme.spacing.unit * 8,\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n        padding: `${theme.spacing.unit * 2}px ${theme.spacing.unit * 3}px ${theme.spacing.unit * 3}px`,\n    },\n    avatar: {\n        margin: theme.spacing.unit,\n        backgroundColor: theme.palette.secondary.main,\n    },\n    form: {\n        width: '100%', // Fix IE 11 issue.\n        marginTop: theme.spacing.unit,\n    },\n    submit: {\n        marginTop: theme.spacing.unit * 3,\n    },\n});\n\nclass SignIn extends Component {\n    state = {\n        redirect: false,\n        email: \"\",\n        password: \"\",\n        clientID: \"\",\n        redirectURI: \"\",\n        stateString: \"\",\n    }\n\n    constructor(props) {\n        super(props);\n        const values = queryString.parse(window.location.search);\n\n        const { client_id, redirect_uri, state } = values;\n\n        console.log(client_id, redirect_uri, state);\n\n        this.state = {\n            clientID: client_id,\n            redirectURI: redirect_uri,\n            stateString: state,\n        }\n    }\n\n    render() {\n        const { classes } = this.props;\n\n        if (this.state.redirect) {\n            const { redirectURI, stateString, accessToken } = this.state;\n            alert(accessToken);\n            const url = `${redirectURI}#access_token=${accessToken}&token_type=bearer&state=${stateString}`\n            window.location = url;\n            return (\n                <h2>Redirecting...</h2>\n                // <Redirect to=\"https://www.google.com\" />\n            );\n        }\n\n        return (\n            <main className={classes.main}>\n                <CssBaseline />\n                <Paper className={classes.paper}>\n                    <Avatar className={classes.avatar}>\n                        <LockOutlinedIcon />\n                    </Avatar>\n                    <Typography component=\"h1\" variant=\"h5\">\n                        Connect to Google Smart Home\n        </Typography>\n                    <form className={classes.form} onSubmit={this.login}>\n                        <FormControl margin=\"normal\" required fullWidth>\n                            <InputLabel htmlFor=\"email\">Email Address</InputLabel>\n                            <Input onChange={(event) => {\n                                this.setState({\n                                    email: event.target.value,\n                                })\n                            }} id=\"email\" name=\"email\" autoComplete=\"email\" autoFocus />\n                        </FormControl>\n                        <FormControl margin=\"normal\" required fullWidth>\n                            <InputLabel htmlFor=\"password\">Password</InputLabel>\n                            <Input onChange={(event) => {\n                                this.setState({\n                                    password: event.target.value,\n                                })\n                            }} name=\"password\" type=\"password\" id=\"password\" autoComplete=\"current-password\" />\n                        </FormControl>\n                        <Button\n                            onSubmit={this.login}\n                            type=\"submit\"\n                            fullWidth\n                            variant=\"contained\"\n                            color=\"primary\"\n                            className={classes.submit}\n                        >\n                            Sign in & Authorize\n          </Button>\n                    </form>\n                </Paper>\n            </main>\n        );\n\n    }\n\n    login = (e) => {\n        e.preventDefault();\n        console.log(this.state);\n\n        /* this.setState({\n            redirect: true,\n        }) */\n\n        const { email, password } = this.state;\n\n        axios.post(\"/login\", {\n            email: email,\n            password: password,\n        }).then((res) => {\n            if (res.status !== 200) {\n                this.setState({\n                    email: \"\",\n                    password: \"\",\n                    redirect: false,\n                })\n                alert('ERROR');\n            } else {\n                console.log(res.data.token)\n                this.setState({\n                    accessToken: res.data.token,\n                    redirect: true,\n                })\n            }\n        }, () => {\n            this.setState({\n                email: \"\",\n                password: \"\",\n                redirect: false,\n            })\n            alert('ERROR')\n        });\n    }\n}\n\n// export default SignIn;\n\n/* function SignIn(props) {\n\n    return (\n        \n    );\n} */\n\nSignIn.propTypes = {\n    classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(SignIn);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Signin from './Signin';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Signin />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}